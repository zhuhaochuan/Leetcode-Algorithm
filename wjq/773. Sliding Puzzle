//773. Sliding Puzzle

class Solution {
public:
    vector<vector<int>> dir = {
        {1, 3},
        {0, 2, 4},
        {1, 5},
        {0, 4},
        {3, 5, 1},
        {4, 2}
    };
    int slidingPuzzle(vector<vector<int>>& board) {
        string s = "";
        string e = "123450";
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                s.push_back(board[i][j] + '0');
            }
        }
        int step = 0;
        queue<string> q;
        unordered_set<string> vis;
        q.push(s);
        vis.insert(s);
        while(!q.empty()) {
            int sz = q.size();
            // 把上一步的所有状态交换衍生出的所有状态都进行搜索放入q中
            for (int j = 0; j < sz; j++) {
                string curState = q.front();
                q.pop();
                if (curState == e) {
                    return step;
                }
                // 找到0所在位置
                int zeroIdx = 0;
                while (curState[zeroIdx] != '0') {
                    zeroIdx++;
                }
                // 交换0与其他位置
                for (int adj : dir[zeroIdx]) {
                    string newState = curState;
                    swap(newState[zeroIdx], newState[adj]);
                    if(vis.find(newState) == vis.end()) {
                        q.push(newState);
                        vis.insert(newState);
                    }
                }
            }
            step++;
        }
        return -1;
    }
};