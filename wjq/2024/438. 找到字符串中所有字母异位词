示例 1:

输入: s = "cbaebabacd", p = "abc"
输出: [0,6] [0,3,6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。
 示例 2:

输入: s = "abab", p = "ab"
输出: [0,1,2]
解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int left = 0, right = 0, sum = 0;
        std::unordered_map<char, int> count_p;
        std::unordered_map<char, int> count_s;

        for (int i = 0; i < p.length(); i++) {
            char c = p[i];
            count_p[c]++;
            sum++;
        }
        vector<int> res;
        // cbaebabacd
        while(left < s.length() && right < s.length()) {
            char c = s[right];
            count_s[c]++;
            while(count_s[c] > count_p[c] && left < s.length()) {
                char tmp = s[left];
                count_s[tmp]--;
                left++;
            }
            if (right - left + 1 == sum) {
                res.push_back(left);
            }
            right++;
        }
        return res;
    }
};