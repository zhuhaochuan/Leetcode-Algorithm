class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        std::deque<std::pair<int,int>> incre_stack;
        vector<int> left_min(heights.size(), 0);
        for(int i = 0; i < heights.size(); i++) {
            while(!incre_stack.empty() && incre_stack.back().first >= heights[i]) {
                incre_stack.pop_back();
            }
            if (incre_stack.empty()) {
                left_min[i] = 0;
            } else {
                left_min[i] = incre_stack.back().second;
            }
            incre_stack.push_back(std::pair<int, int>(heights[i], i + 1));
        }
        vector<int> right_min(heights.size(), 0);
        incre_stack.clear();
        for(int i = heights.size() - 1; i >= 0; i--) {
            while(!incre_stack.empty() && incre_stack.back().first >= heights[i]) {
                incre_stack.pop_back();
            }
            if (incre_stack.empty()) {
                right_min[i] = heights.size() + 1;
            } else {
                right_min[i] = incre_stack.back().second;
            }
            incre_stack.push_back(std::pair<int, int>(heights[i], i + 1));
        }
        int max_area = 0;
        for (int i = 0; i < heights.size(); i++) {
            max_area = std::max(max_area, (right_min[i] - left_min[i] - 1) *heights[i]); 
        }
        return max_area;
    }
};