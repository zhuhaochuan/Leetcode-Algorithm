class Solution {
public:
    vector<vector<string>> res;
    std::set<int> column;
    std::set<int> left;
    std::set<int> right;
    vector<vector<string>> solveNQueens(int n) {
        std::vector<int> tmp;
        dfs(tmp, 0, n);
        return res;
    }
    void dfs(std::vector<int> tmp, int row, int n) {
        if (tmp.size() == n) {
            vector<string> r;
            for (int i = 0; i < n; i++) {
                string s(n, '.');
                s[tmp[i]] = 'Q';
                r.push_back(s);
            }
            res.push_back(r);
            return;
        }
        for (int i = 0; i < n; i++) {
            if(column.find(i) != column.end() ||
                left.find(i + row) != left.end() ||
                right.find(i - row) != right.end()) {
                continue;
            }
            tmp.push_back(i);
            column.insert(i);
            left.insert(i + row);
            right.insert(i - row);
            dfs(tmp, row + 1, n);
            tmp.pop_back();
            column.erase(i);
            left.erase(i + row);
            right.erase(i - row);
        }

    }
};