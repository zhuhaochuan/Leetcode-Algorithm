class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int k = initial.size();
        int res = n+1;
        int c = -1;
        unordered_set<int> set(initial.begin(),initial.end());

        for(int i=0;i<k;++i){
            unordered_map<int,int> map;
            int cur = initial[i];
            int count = 0;
            set.erase(cur);
            map[cur] = 1;
            for(int j=0;j<n;++j) {
                int sub_count = 0;
                if(j==cur||graph[cur][j]==0||map[j]) continue;
                bool ok = dfs(graph,map,j,sub_count,set);
                if(ok) count = count + sub_count + 1;
            }
            set.insert(cur);

            if(count>c){
                c = count;
                res = cur;
            }else if(count==c){
                res = min(res,cur);
            }
        }
        return res;
    }

    bool dfs(vector<vector<int>>& graph,unordered_map<int,int>& map,int cur,int& count,unordered_set<int>& set){
        int n = graph.size();
        if(set.count(cur)) return false;

        map[cur] = 1;
        int c = 0;
        
        for(int j=0;j<n;++j){
            if(j==cur||map[j]) continue;
            if(graph[cur][j]){
                bool ok = dfs(graph,map,j,count,set);
                if(ok) {
                    c++;
                }else {
                    set.insert(j);
                    return false;
                }
            }
        }
        count += c;
        return true;
    }


};